events {
    worker_connections  16;
}
http {
    server {
        listen 80;
        server_name EXAMPLE.com;    # EDIT HERE

        location / {
            proxy_pass http://app:3000;
        }

        location /goo {
            proxy_pass http://www.google.com/;
            proxy_set_header Host www.google.com;
        }

    }

    server {
        listen 443 ssl ;
        server_name EXAMPLE.com;    ##### EDIT HERE #####

        ssl_certificate           /etc/nginx/letsencrypt/fullchain.pem;
        ssl_certificate_key       /etc/nginx/letsencrypt/privkey.pem;
        ssl_session_cache         shared:SSL:10m;
        ssl_session_timeout       10m;
        ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers               HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        location / {
             proxy_pass http://app:3000/;

        }
        #FastCGI authorizer for Auth Request module
        location = /shibauthorizer {
            internal;
            include fastcgi_params;
            fastcgi_pass growi_shibboleth_1:8010;
        }

        #FastCGI responder
        location /Shibboleth.sso {
            include fastcgi_params;
            fastcgi_pass growi_shibboleth_1:8011;
        }

        #Resources for the Shibboleth error pages. This can be customised.
       location /shibboleth-sp {
           alias /usr/share/shibboleth/;
        }

        #A secured location.  Here all incoming requests query the
        #FastCGI authorizer.  Watch out for performance issues and spoofing.
        location /secure {
             include shib_clear_headers;
             #Add your attributes here. They get introduced as headers
             #by the FastCGI authorizer so we must prevent spoofing.
             more_clear_input_headers 'displayName' 'mail' 'persistent-id';
             shib_request /shibauthorizer;
             shib_request_use_headers on;
             proxy_pass http://app:3000;
         }


    }
}


